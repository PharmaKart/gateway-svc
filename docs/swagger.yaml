definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.HealthResponse:
    description: Health check response
    properties:
      status:
        example: ok
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handlers.OrderStatusRequest:
    properties:
      status:
        type: string
    type: object
  handlers.Product:
    properties:
      description:
        example: Pain relief medication
        type: string
      name:
        example: Paracetamol
        type: string
      price:
        example: 9.99
        type: number
      requires_prescription:
        example: true
        type: boolean
      stock:
        example: 100
        minimum: 0
        type: integer
    required:
    - description
    - name
    - price
    - stock
    type: object
  handlers.RegisterRequest:
    properties:
      city:
        type: string
      country:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      postal_code:
        type: string
      province:
        type: string
      street_line1:
        type: string
      street_line2:
        type: string
      username:
        type: string
    type: object
  handlers.StockRequest:
    properties:
      quantity:
        minimum: 0
        type: integer
      reason:
        type: string
    required:
    - quantity
    - reason
    type: object
  proto.CreateProductResponse:
    properties:
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      requires_prescription:
        type: boolean
      stock:
        type: integer
    type: object
  proto.DeleteProductResponse:
    properties:
      message:
        type: string
    type: object
  proto.GetOrderResponse:
    properties:
      customer_id:
        type: string
      items:
        items:
          $ref: '#/definitions/proto.OrderItem'
        type: array
      order_id:
        type: string
      prescription_url:
        type: string
      status:
        type: string
    type: object
  proto.GetPaymentResponse:
    properties:
      amount:
        type: number
      customer_id:
        type: string
      order_id:
        type: string
      payment_id:
        type: string
      status:
        type: string
      transaction_id:
        type: string
    type: object
  proto.GetProductResponse:
    properties:
      product:
        $ref: '#/definitions/proto.Product'
    type: object
  proto.ListAllOrdersResponse:
    properties:
      limit:
        type: integer
      orders:
        items:
          $ref: '#/definitions/proto.GetOrderResponse'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  proto.ListCustomersOrdersResponse:
    properties:
      limit:
        type: integer
      orders:
        items:
          $ref: '#/definitions/proto.GetOrderResponse'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  proto.ListProductsResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      products:
        items:
          $ref: '#/definitions/proto.Product'
        type: array
      total:
        type: integer
    type: object
  proto.LoginResponse:
    properties:
      message:
        type: string
      role:
        description: customer or admin
        type: string
      success:
        type: boolean
      token:
        type: string
      user_id:
        type: string
    type: object
  proto.OrderItem:
    properties:
      price:
        type: number
      product_id:
        type: string
      product_name:
        type: string
      quantity:
        type: integer
    type: object
  proto.PlaceOrderResponse:
    properties:
      order_id:
        type: string
      payment_url:
        type: string
    type: object
  proto.Product:
    properties:
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      requires_prescription:
        type: boolean
      stock:
        type: integer
    type: object
  proto.RegisterResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  proto.UpdateOrderStatusResponse:
    properties:
      message:
        type: string
    type: object
  proto.UpdateProductResponse:
    properties:
      message:
        type: string
    type: object
  proto.UpdateStockResponse:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/admin/orders:
    get:
      consumes:
      - application/json
      description: Retrieves all orders
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page limit
        in: query
        name: limit
        type: integer
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: sort_order
        type: string
      - description: Filter field
        in: query
        name: filter
        type: string
      - description: Filter value
        in: query
        name: filter_value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.ListAllOrdersResponse'
      security:
      - ApiKeyAuth: []
      summary: List all orders
      tags:
      - Orders
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Login with the provided email/username and password
      parameters:
      - description: Login details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Login
      tags:
      - Authentication
  /api/v1/orders:
    get:
      consumes:
      - application/json
      description: Retrieves all orders for a customer
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page limit
        in: query
        name: limit
        type: integer
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: sort_order
        type: string
      - description: Filter field
        in: query
        name: filter
        type: string
      - description: Filter value
        in: query
        name: filter_value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.ListCustomersOrdersResponse'
      security:
      - ApiKeyAuth: []
      summary: List all orders
      tags:
      - Orders
    post:
      consumes:
      - multipart/form-data
      description: Creates new order with the given product ID and quantity
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Customer ID
        in: formData
        name: customer_id
        required: true
        type: string
      - description: Order Items JSON
        in: formData
        name: items
        required: true
        type: string
      - description: Prescription Image
        in: formData
        name: prescription
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.PlaceOrderResponse'
      security:
      - ApiKeyAuth: []
      summary: Place a new order
      tags:
      - Orders
  /api/v1/orders/{id}:
    put:
      consumes:
      - application/json
      description: Updates an order by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.OrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.UpdateOrderStatusResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an order
      tags:
      - Orders
  /api/v1/payments/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a payment by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.GetPaymentResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a payment
      tags:
      - Payments
  /api/v1/payments/order/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a payment by order ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.GetPaymentResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a payment by order ID
      tags:
      - Payments
  /api/v1/products:
    get:
      consumes:
      - application/json
      description: Fetches a list of products
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: sort_order
        type: string
      - description: Filter field
        in: query
        name: filter
        type: string
      - description: Filter value
        in: query
        name: filter_value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.ListProductsResponse'
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - multipart/form-data
      description: Adds a new product to the inventory
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product Name
        in: formData
        name: name
        required: true
        type: string
      - description: Product Description
        in: formData
        name: description
        required: true
        type: string
      - description: Product Price
        in: formData
        name: price
        required: true
        type: number
      - description: Stock Quantity
        in: formData
        name: stock
        required: true
        type: integer
      - description: Requires Prescription
        in: formData
        name: requires_prescription
        type: boolean
      - description: Product Image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.CreateProductResponse'
      security:
      - ApiKeyAuth: []
      summary: Add a new product
      tags:
      - Products
  /api/v1/products/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.DeleteProductResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Fetches a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.GetProductResponse'
      summary: Get a product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Updates a product by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.UpdateProductResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - Products
  /api/v1/products/{id}/stock:
    put:
      consumes:
      - application/json
      description: Updates the stock of a product by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Stock Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.StockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.UpdateStockResponse'
      security:
      - ApiKeyAuth: []
      summary: Update stock
      tags:
      - Products
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /health:
    get:
      description: Check if the service is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HealthResponse'
      summary: Health check
      tags:
      - Utility
swagger: "2.0"
