definitions:
  handlers.ErrorResponse:
    description: Error response
    properties:
      details:
        additionalProperties:
          type: string
        example:
          field: error message
        type: object
      message:
        example: Invalid request format
        type: string
      type:
        example: VALIDATION_ERROR
        type: string
    type: object
  handlers.HealthResponse:
    description: Health check response
    properties:
      status:
        example: ok
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handlers.OrderStatusRequest:
    properties:
      status:
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      city:
        type: string
      country:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      postal_code:
        type: string
      province:
        type: string
      street_line1:
        type: string
      street_line2:
        type: string
      username:
        type: string
    type: object
  handlers.ScheduleReminderRequest:
    properties:
      customer_id:
        type: string
      order_id:
        type: string
      product_id:
        type: string
      reminder_date:
        type: string
    required:
    - customer_id
    - order_id
    - product_id
    - reminder_date
    type: object
  handlers.StockRequest:
    properties:
      quantity_change:
        type: integer
      reason:
        type: string
    required:
    - quantity_change
    - reason
    type: object
  handlers.UpdateProductReq:
    properties:
      description:
        example: Pain relief medication
        type: string
      name:
        example: Paracetamol
        type: string
      price:
        example: 9.99
        type: number
      requires_prescription:
        example: true
        type: boolean
    required:
    - description
    - name
    - price
    type: object
  proto.CreateProductResponse:
    properties:
      description:
        type: string
      error:
        $ref: '#/definitions/proto.Error'
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      requires_prescription:
        type: boolean
      stock:
        type: integer
      success:
        type: boolean
    type: object
  proto.DeleteProductResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      message:
        type: string
      success:
        type: boolean
    type: object
  proto.DeleteReminderResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      message:
        type: string
      success:
        type: boolean
    type: object
  proto.Error:
    properties:
      details:
        items:
          $ref: '#/definitions/proto.KeyValuePair'
        type: array
      message:
        type: string
      type:
        type: string
    type: object
  proto.GetInventoryLogsResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      limit:
        type: integer
      logs:
        items:
          $ref: '#/definitions/proto.InventoryLog'
        type: array
      page:
        type: integer
      success:
        type: boolean
      total:
        type: integer
    type: object
  proto.GetOrderResponse:
    properties:
      customer_id:
        type: string
      error:
        $ref: '#/definitions/proto.Error'
      items:
        items:
          $ref: '#/definitions/proto.OrderItem'
        type: array
      order_id:
        type: string
      prescription_url:
        type: string
      status:
        type: string
      success:
        type: boolean
    type: object
  proto.GetPaymentResponse:
    properties:
      amount:
        type: number
      customer_id:
        type: string
      error:
        $ref: '#/definitions/proto.Error'
      order_id:
        type: string
      payment_id:
        type: string
      status:
        type: string
      success:
        type: boolean
      transaction_id:
        type: string
    type: object
  proto.GetProductResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      product:
        $ref: '#/definitions/proto.Product'
      success:
        type: boolean
    type: object
  proto.InventoryLog:
    properties:
      change_type:
        type: string
      created_at:
        type: string
      id:
        type: string
      product_id:
        type: string
      quantity_change:
        type: integer
    type: object
  proto.KeyValuePair:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  proto.ListAllOrdersResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      limit:
        type: integer
      orders:
        items:
          $ref: '#/definitions/proto.Order'
        type: array
      page:
        type: integer
      success:
        type: boolean
      total:
        type: integer
    type: object
  proto.ListCustomersOrdersResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      limit:
        type: integer
      orders:
        items:
          $ref: '#/definitions/proto.Order'
        type: array
      page:
        type: integer
      success:
        type: boolean
      total:
        type: integer
    type: object
  proto.ListProductsResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      limit:
        type: integer
      page:
        type: integer
      products:
        items:
          $ref: '#/definitions/proto.Product'
        type: array
      success:
        type: boolean
      total:
        type: integer
    type: object
  proto.ListReminderLogsResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      limit:
        type: integer
      logs:
        items:
          $ref: '#/definitions/proto.ReminderLog'
        type: array
      page:
        type: integer
      success:
        type: boolean
      total:
        type: integer
    type: object
  proto.ListRemindersResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      limit:
        type: integer
      page:
        type: integer
      reminders:
        items:
          $ref: '#/definitions/proto.Reminder'
        type: array
      success:
        type: boolean
      total:
        type: integer
    type: object
  proto.LoginResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      message:
        type: string
      role:
        description: customer or admin
        type: string
      success:
        type: boolean
      token:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  proto.Order:
    properties:
      customer_id:
        type: string
      items:
        items:
          $ref: '#/definitions/proto.OrderItem'
        type: array
      order_id:
        type: string
      prescription_url:
        type: string
      status:
        type: string
    type: object
  proto.OrderItem:
    properties:
      price:
        type: number
      product_id:
        type: string
      product_name:
        type: string
      quantity:
        type: integer
    type: object
  proto.PlaceOrderResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      order_id:
        type: string
      payment_url:
        type: string
      success:
        type: boolean
    type: object
  proto.Product:
    properties:
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      requires_prescription:
        type: boolean
      stock:
        type: integer
    type: object
  proto.RegisterResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      message:
        type: string
      success:
        type: boolean
    type: object
  proto.Reminder:
    properties:
      created_at:
        type: string
      customer_id:
        type: string
      enabled:
        type: boolean
      id:
        type: string
      last_sent_at:
        type: string
      order_id:
        type: string
      product_id:
        type: string
      reminder_date:
        type: string
    type: object
  proto.ReminderLog:
    properties:
      created_at:
        type: string
      id:
        type: string
      order_id:
        type: string
      reminder_id:
        type: string
      status:
        type: string
    type: object
  proto.ScheduleReminderResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      reminder_id:
        type: string
      success:
        type: boolean
    type: object
  proto.ToggleReminderResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      message:
        type: string
      success:
        type: boolean
    type: object
  proto.UpdateOrderStatusResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      message:
        type: string
      success:
        type: boolean
    type: object
  proto.UpdateProductResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      message:
        type: string
      success:
        type: boolean
    type: object
  proto.UpdateReminderResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      message:
        type: string
      success:
        type: boolean
    type: object
  proto.UpdateStockResponse:
    properties:
      error:
        $ref: '#/definitions/proto.Error'
      message:
        type: string
      success:
        type: boolean
    type: object
  utils.ErrorResponse:
    properties:
      details:
        additionalProperties:
          type: string
        type: object
      message:
        type: string
      type:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/admin/orders:
    get:
      consumes:
      - application/json
      description: Retrieves all orders
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page limit
        in: query
        name: limit
        type: integer
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: sort_order
        type: string
      - description: Filter column
        in: query
        name: filter_column
        type: string
      - description: Filter operator
        in: query
        name: filter_operator
        type: string
      - description: Filter value
        in: query
        name: filter_value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.ListAllOrdersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all orders
      tags:
      - Orders
  /api/v1/admin/orders/{id}:
    put:
      consumes:
      - application/json
      description: Updates an order by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.OrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.UpdateOrderStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an order
      tags:
      - Orders
  /api/v1/admin/products:
    post:
      consumes:
      - multipart/form-data
      description: Adds a new product to the inventory
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product Name
        in: formData
        name: name
        required: true
        type: string
      - description: Product Description
        in: formData
        name: description
        required: true
        type: string
      - description: Product Price
        in: formData
        name: price
        required: true
        type: number
      - description: Stock Quantity
        in: formData
        name: stock
        required: true
        type: integer
      - description: Requires Prescription
        in: formData
        name: requires_prescription
        type: boolean
      - description: Product Image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.CreateProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add a new product
      tags:
      - Products
  /api/v1/admin/products/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.DeleteProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Updates a product by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProductReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.UpdateProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - Products
  /api/v1/admin/products/{id}/logs:
    get:
      consumes:
      - application/json
      description: Fetches inventory logs for a specific product
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort by column
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: sort_order
        type: string
      - description: Filter column
        in: query
        name: filter_column
        type: string
      - description: Filter operator
        in: query
        name: filter_operator
        type: string
      - description: Filter value
        in: query
        name: filter_value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.GetInventoryLogsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get inventory logs
      tags:
      - Products
  /api/v1/admin/products/{id}/stock:
    put:
      consumes:
      - application/json
      description: Updates the stock of a product by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Stock Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.StockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.UpdateStockResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update stock
      tags:
      - Products
  /api/v1/admin/reminders:
    get:
      consumes:
      - application/json
      description: List all reminders
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: sort_order
        type: string
      - description: Filter column
        in: query
        name: filter_column
        type: string
      - description: Filter operator
        in: query
        name: filter_operator
        type: string
      - description: Filter value
        in: query
        name: filter_value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.ListRemindersResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List reminders
      tags:
      - Reminders
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Login with the provided email/username and password
      parameters:
      - description: Login details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Login
      tags:
      - Authentication
  /api/v1/orders:
    get:
      consumes:
      - application/json
      description: Retrieves all orders for a customer
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page limit
        in: query
        name: limit
        type: integer
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: sort_order
        type: string
      - description: Filter column
        in: query
        name: filter_column
        type: string
      - description: Filter operator
        in: query
        name: filter_operator
        type: string
      - description: Filter value
        in: query
        name: filter_value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.ListCustomersOrdersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List all orders
      tags:
      - Orders
    post:
      consumes:
      - multipart/form-data
      description: Creates new order with the given product ID and quantity
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order Items JSON
        in: formData
        name: items
        required: true
        type: string
      - description: Prescription Image
        in: formData
        name: prescription
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.PlaceOrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Place a new order
      tags:
      - Orders
  /api/v1/orders/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves an order by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.GetOrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get an order
      tags:
      - Orders
  /api/v1/payments/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a payment by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.GetPaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a payment
      tags:
      - Payments
  /api/v1/payments/order/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a payment by order ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.GetPaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a payment by order ID
      tags:
      - Payments
  /api/v1/products:
    get:
      consumes:
      - application/json
      description: Fetches a list of products
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort by column
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: sort_order
        type: string
      - description: Filter column
        in: query
        name: filter_column
        type: string
      - description: Filter operator
        in: query
        name: filter_operator
        type: string
      - description: Filter value
        in: query
        name: filter_value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.ListProductsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all products
      tags:
      - Products
  /api/v1/products/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.GetProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get a product
      tags:
      - Products
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /api/v1/reminders:
    get:
      consumes:
      - application/json
      description: List all reminders for a customer
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Customer ID
        in: query
        name: customer_id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: sort_order
        type: string
      - description: Filter column
        in: query
        name: filter_column
        type: string
      - description: Filter operator
        in: query
        name: filter_operator
        type: string
      - description: Filter value
        in: query
        name: filter_value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.ListRemindersResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List customer reminders
      tags:
      - Reminders
    post:
      consumes:
      - application/json
      description: Schedule a reminder for a customer
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Reminder Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ScheduleReminderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.ScheduleReminderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Schedule a reminder
      tags:
      - Reminders
  /api/v1/reminders/{reminder_id}:
    delete:
      consumes:
      - application/json
      description: Deletes a reminder
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Reminder ID
        in: path
        name: reminder_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.DeleteReminderResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a reminder
      tags:
      - Reminders
    patch:
      consumes:
      - application/json
      description: Toggles a reminder
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Reminder ID
        in: path
        name: reminder_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.ToggleReminderResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Toggle a reminder
      tags:
      - Reminders
    put:
      consumes:
      - application/json
      description: Updates a reminder
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Reminder ID
        in: path
        name: reminder_id
        required: true
        type: string
      - description: Reminder Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ScheduleReminderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.UpdateReminderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a reminder
      tags:
      - Reminders
  /api/v1/reminders/{reminder_id}/logs:
    get:
      consumes:
      - application/json
      description: List all reminder logs
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Reminder ID
        in: path
        name: reminder_id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort by field
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc/desc)
        in: query
        name: sort_order
        type: string
      - description: Filter column
        in: query
        name: filter_column
        type: string
      - description: Filter operator
        in: query
        name: filter_operator
        type: string
      - description: Filter value
        in: query
        name: filter_value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.ListReminderLogsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List reminder logs
      tags:
      - Reminders
  /api/v1/webhook:
    post:
      consumes:
      - application/json
      description: Processes incoming Stripe webhook events
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Process Stripe webhook
      tags:
      - Payments
  /health:
    get:
      description: Check if the service is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HealthResponse'
      summary: Health check
      tags:
      - Utility
swagger: "2.0"
